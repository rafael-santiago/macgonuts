#
# Copyright (c) 2022, Rafael Santiago
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/gcc/gcc-lib.hsl
include ~/toolsets/clang/clang-app.hsl
include ~/toolsets/clang/clang-lib.hsl
include ~/toolsets/common/utils/lang/c/dependency_scanner.hsl
include ~/toolsets/common/utils/lang/c/lcov.hsl
include ~/fsutil.hsl
include ~/conv.hsl

function installer() : result type none {
    var option type list;

    $option = hefesto.sys.get_option("install");
    if ($option.count() > 0) {
        hefesto.project.abort(build("install"));
    }

    $option = hefesto.sys.get_option("uninstall");
    if ($option.count() > 0) {
        hefesto.project.abort(build("uninstall"));
    }
}

function debian_packer() : result type none {
    var option type list;
    $option = hefesto.sys.get_option("debian-pkg");
    if ($option.count() > 0) {
        hefesto.project.abort(build("debian_pkg"));
    }
}

function build_projects(projects type list) : result type int {
    if ($projects.count() == 0) {
        hefesto.sys.echo("ERROR: No projects to build.\n");
        result 1;
    }

    var p type int;
    var exit_code type int;

    $exit_code = 0;
    $p = 0;

    while ($p < $projects.count() && $exit_code == 0) {
        var curr_subproj type string;
        $curr_subproj = $projects.item($p);
        $exit_code = build($curr_subproj);
        $p = $p + 1;
    }

    result $exit_code;
}

function runtests(binary type string, args type string) : result type none {
    if (hefesto.sys.run($binary + " " + $args) != 0) {
        hefesto.project.abort(1);
    }
    var option type list;
    $option = hefesto.sys.get_option("coverage");
    if ($option.count() > 0) {
        var obj_output_dir type string;
        $option = hefesto.sys.get_option("obj-output-dir");
        if ($option.count() > 0) {
            $obj_output_dir = $option.item(0);
        } else {
            $obj_output_dir = hefesto.sys.pwd();
        }
        if (generate_lcov_report($obj_output_dir) != 0) {
            hefesto.project.abort(1);
        }
    }
}

function set_rootdir(change_to type string) : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if ($change_to.len() > 0) {
        hefesto.sys.cd($change_to);
    }

    hefesto.sys.setenv("MACGONUTS_ROOT_DIR", hefesto.sys.pwd());
    hefesto.sys.cd($oldcwd);
}

function get_rootdir() : result type string {
    result hefesto.sys.env("MACGONUTS_ROOT_DIR");
}

function has_gcc() : result type int {
    result (hefesto.sys.run("gcc --version >/dev/null 2>&1") == 0);
}

function has_clang() : result type int {
    result (hefesto.sys.run("clang --version >/dev/null 2>&1") == 0);
}

function get_app_toolset() : result type string {
    result get_toolset() + "-c-app";
}

function get_lib_toolset() : result type string {
    result get_toolset() + "-c-lib";
}

function get_toolset() : result type string {
    var option type list;
    $option = hefesto.sys.get_option("toolset");
    if ($option.count() > 0) {
        result $option.item(0);
    }

    if (has_gcc()) {
        result "gcc";
    }

    if (has_clang()) {
        result "clang";
    }

    result "";
}

function get_codes(dirlist type list, deps type string) : result type list {
    var oldcwd type string;
    var codes type list;

    $oldcwd = hefesto.sys.pwd();

    hefesto.sys.setenv("GET_C_CPP_DEPS_SRC_ROOT", $oldcwd);

    var d type int;

    $d = 0;

    while ($d < $dirlist.count()) {
        var dirpath type string;
        $dirpath = $dirlist.item($d);

        if (hefesto.sys.cd($dirpath)) {
            $deps = $deps + get_c_cpp_deps();
            $codes.ls(".*\\.c$");
            hefesto.sys.cd($oldcwd);
        } else {
            hefesto.sys.echo("WARN: Unable to access the path \'" + $dirpath + "'. Just skipping it.\n");
        }

        $d = $d + 1;
    }

    hefesto.sys.cd($oldcwd);

    hefesto.sys.byref($deps);

    result $codes;
}

function build(dep type string) : result type int {
    var build_task type int;
    $build_task = hefesto.sys.get_func_addr("build_" + $dep);

    if ($build_task == 0) {
        hefesto.sys.echo("ERROR: Unable to find build task for " + $dep + ".\n");
        result 1;
    }

    result hefesto.sys.call_func_addr($build_task);
}

local function build_accacia() : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    var exit_code type int;
    $exit_code = 1;

    var accacia_src_dir type string;
    $accacia_src_dir = hefesto.sys.make_path(get_rootdir(), "libs/accacia/src");
    if (hefesto.sys.cd($accacia_src_dir)) {
        if (isfile("../lib/libaccacia.a") == 0) {
            $exit_code = hefesto.sys.run("hefesto --toolset=" + get_lib_toolset());
        } else {
            $exit_code = 0;
        }
    }

    hefesto.sys.cd($oldcwd);

    result $exit_code;
}

function get_coverage_report_dir() : result type string {
    var report_path type string;
    var option type list;
    $option = hefesto.sys.get_option("genhtml-outpath");
    var genhtml_outpath type string;
    if ($option.count() == 0) {
        $report_path = hefesto.sys.make_path(get_rootdir(),
                       hefesto.sys.make_path("/reports/", hefesto.project.name()));
    } else {
        $report_path = $option.item(0);
        $report_path = hefesto.sys.make_path($report_path,
                                             hefesto.project.name());
    }
    result $report_path;
}

local function build_submodule(subdir type string) : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd($subdir) == 0) {
        hefesto.sys.echo("ERROR: " + $subdir + " directory not found.\n");
        result 1;
    }

    var build_options type string;
    $build_options = hefesto.project.cmdline();
    $build_options.replace("--bin-output-dir=.* ", "");
    $build_options.replace("--obj-output-dir=.* ", "");
    $build_options.replace("--includes=.* ", "");
    $build_options.replace("--cflags=.* ", "");
    $build_options.replace("--libraries=.* ", "");
    $build_options.replace("--ldflags=.* ", "");

    var coverage type list;
    $coverage = hefesto.sys.get_option("coverage");
    var report_path type string;

    var projects2cov type list;
    # INFO(Rafael): Add to this list all projects relevant to extract coverage info.
    #
    #               By now we are only extracting coverage info from libmacgonuts.
    #               The cmd-tool is rather difficult for unit testing since it depends
    #               on promoting all attacks that its tasks implements. Automating the
    #               execution of all them into a docker-velotrol-based-environment [sic]
    #               would be a quixotic task. Even so, if you want to, good luck!
    $projects2cov.add_item("macgonuts-static-lib");

    if ($coverage.count() > 0
        && $subdir == "test") {
        var subproject type string;
        $subproject = $subdir;
        $subproject.replace("/", "-");
        $coverage = hefesto.sys.get_option("genhtml-outpath");
        var genhtml_outpath type string;
        $report_path = get_coverage_report_dir();
        if ($coverage.count() > 0) {
            $report_path = $coverage.item(0);
            $build_options.replace("--genhtml-outpath=.* ", "");
        }
        if ($projects2cov.index_of(hefesto.project.name()) > -1) {
            $genhtml_outpath = " --genhtml-outpath=" + $report_path;
        }
        $build_options = $build_options +
                         " --gcda-search-path=.o," + hefesto.sys.make_path($oldcwd, ".o") + " " +
                         " --lcov-remove-patterns=*_tests.c,*src/test*,/usr/include " +
                         " --genhtml-rendering-options=--legend" +
                         $genhtml_outpath;

    }

    var exit_code type int;
    $exit_code = hefesto.sys.run("hefesto " + $build_options);

    hefesto.sys.cd($oldcwd);

    result $exit_code;
}

function do_break_when_low_coverage(function_coverage type string,
                                    line_coverage type string) : result type none {
    var low_nr type int;
    $low_nr = is_low_cov($function_coverage);
    if ($low_nr > 0) {
        hefesto.sys.echo("ERROR: Low function coverage detected (it must be >= 75) : " +
                         $function_coverage + "%\n");
    }
    $low_nr = $low_nr + is_low_cov($line_coverage);
    if ($low_nr > 0) {
        hefesto.sys.echo("ERROR: Low line coverage detected (it must be >= 75) : " +
                         $line_coverage + "%\n");
    }
    if ($low_nr > 0) {
        hefesto.project.abort(1);
    }
}

local function is_low_cov(coverage type string) : result type int {
    var dec type string;
    $dec = $coverage;
    $dec.replace("\\..*$", "");
    result (str2int($dec) < 75);
}

function get_function_coverage(report_path type string) : result type string {
    result get_coverage_result($report_path, "<td.*Functions:</td>");
}

function get_line_coverage(report_path type string) : result type string {
    result get_coverage_result($report_path, "<td.*Lines:</td>");
}

function get_function_coverage_badge(value type string) : result type string {
    result get_coverage_badge($value, "function coverage");
}

function get_line_coverage_badge(value type string) : result type string {
    result get_coverage_badge($value, "line coverage");
}

function update_coverage(fcov type string, lcov type string) : result type none {
    var pattern type string;
    $pattern = "!\\[" + hefesto.sys.os_name() + "-function-coverage\\]\\(.*=plastic.*\\)";
    var data type string;
    $data = "![" + hefesto.sys.os_name() + "-function-coverage](" + get_function_coverage_badge($fcov) + ")";
    hefesto.sys.replace_in_file(hefesto.sys.make_path(get_rootdir(), "../README.md"), $pattern, $data);
    $pattern = "!\\[" + hefesto.sys.os_name() + "-line-coverage\\]\\(.*=plastic.*\\)";
    $data = "![" + hefesto.sys.os_name() + "-line-coverage](" + get_line_coverage_badge($lcov) + ")";
    hefesto.sys.replace_in_file(hefesto.sys.make_path(get_rootdir(), "../README.md"), $pattern, $data);
}

local function get_coverage_badge(value type string, prefix type string) : result type string {
    var uri type string;
    $prefix.replace(" ", "_");
    $uri = "https://img.shields.io/badge/" + $prefix + "-" + $value + "%25";
    var dec type string;
    $dec = $value;
    $dec.replace("\\.*$", "");
    var d type int;
    $d = str2int($dec);
    if ($d >= 90) {
        $uri = $uri + "-lime";
    } else if ($d >= 75) {
        $uri = $uri + "-yellow";
    } else {
        $uri = $uri + "-red";
    }
    $uri = $uri + "?logo=" + hefesto.sys.os_name() + "&logoColor=white&style=plastic";
    result $uri;
}

local function get_coverage_result(report_path type string, pattern type string) : result type string {
    var report_data type list;
    $report_data = hefesto.sys.lines_from_file($report_path, ".*");
    if ($report_data.count() == 0) {
        result "NaN";
    }
    var r type int;
    $r = 0;
    while ($r < $report_data.count()) {
        var report_line type string;
        $report_line = $report_data.item($r);
        if ($report_line.match($pattern) == 1 && ($r + 3) < $report_data.count()) {
            var rr type int;
            $rr = $r + 1;
            while ($rr < $r + 4) {
                $report_line = $report_data.item($rr);
                if ($report_line.match("%</td>$") > 0) {
                    $report_line.replace(".*\">", "");
                    $report_line.replace("[ &].*%</td>$", "");
                    result $report_line;
                }
                $rr = $rr + 1;
            }
        }
        $r = $r + 1;
    }
    result "NaN";
}

local function build_cutest() : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    var exit_code type int;
    $exit_code = 1;

    var cutest_src_dir type string;
    $cutest_src_dir = hefesto.sys.make_path(get_rootdir(), "libs/cutest/src");
    if (hefesto.sys.cd($cutest_src_dir)) {
        if (isfile("lib/libcutest.a") == 0) {
            $exit_code = hefesto.sys.run("hefesto --toolset=" + get_lib_toolset());
        } else {
            $exit_code = 0;
        }
    }

    hefesto.sys.cd($oldcwd);

    result $exit_code;
}

local function build_test() : result type int {
    result build_submodule("test");
}

local function build_cmd() : result type int {
    result build_submodule("cmd");
}

local function build_macgonuts_socket() : result type int {
    var bin_output_dir type list;
    $bin_output_dir = hefesto.sys.get_option("bin-output-dir");
    var libpath type string;
    if ($bin_output_dir.count() > 0) {
        $libpath = hefesto.sys.make_path($bin_output_dir.item(0), "libmacgonutssock.a");
    } else {
        $libpath = "libmacgonutssock.a";
    }
    var socket_lib_objects type string;
    var obj_output_dir type list;
    $obj_output_dir = hefesto.sys.get_option("obj-output-dir");
    if ($obj_output_dir.count() > 0) {
        $socket_lib_objects = hefesto.sys.make_path($obj_output_dir.item(0), "macgonuts_socket.o") + " " +
                              hefesto.sys.make_path($obj_output_dir.item(0), "macgonuts_socket_common.o");
    } else {
        $socket_lib_objects = "macgonuts_socket.o macgonuts_socket_common.o";
    }
    result hefesto.sys.run("ar -r " + $libpath + " " + $socket_lib_objects);
}

local function build_install() : result type int {
    var pkg_artifacts_dest type list;
    var pkg_artifacts_src type list;

    $pkg_artifacts_dest.add_item("/usr/local/bin/macgonuts");
    $pkg_artifacts_dest.add_item("/usr/local/man/man1/macgonuts.1");
    $pkg_artifacts_dest.add_item("/usr/local/share/macgonuts/etc/hoax");
    $pkg_artifacts_dest.add_item("/usr/local/share/macgonuts/etc/oui");

    $pkg_artifacts_src.add_item("../bin/macgonuts");
    $pkg_artifacts_src.add_item("../doc/man1/macgonuts.1");
    $pkg_artifacts_src.add_item("../etc/hoax");
    $pkg_artifacts_src.add_item("../etc/oui");

    var a type int;
    $a = 0;
    var err type int;
    $err = 0;
    while ($a < $pkg_artifacts_dest.count() && $err == 0) {
        var curr_filepath type string;
        $curr_filepath = $pkg_artifacts_dest.item($a);
        mktree(pathfromfilepath($curr_filepath));
        if (hefesto.sys.cp($pkg_artifacts_src.item($a), $pkg_artifacts_dest.item($a)) != 1) {
            hefesto.sys.echo("ERROR: When trying to install `" + $pkg_artifacts_dest.item($a) + "`.\n");
            $err = 1;
        }
        $a = $a + 1;
    }

    if ($err == 0) {
        hefesto.sys.echo("INFO: Installed.\n");
    } else if ($err != 0) {
        build("uninstall");
    }

    result $err;
}

local function build_uninstall() : result type int {
    var pkg_artifacts_src type list;

    $pkg_artifacts_src.add_item("/usr/local/bin/macgonuts");
    $pkg_artifacts_src.add_item("/usr/local/man/man1/macgonuts.1");
    $pkg_artifacts_src.add_item("/usr/local/share/macgonuts/etc/hoax");
    $pkg_artifacts_src.add_item("/usr/local/share/macgonuts/etc/oui");

    var a type int;
    $a = 0;
    while ($a < $pkg_artifacts_src.count()) {
        if (hefesto.sys.rm($pkg_artifacts_src.item($a)) != 0) {
            hefesto.sys.echo("WARN: When trying to uninstal `" + $pkg_artifacts_src.item($a) + "`. Try it yourself.\n");
        }
        $a = $a + 1;
    }

    hefesto.sys.echo("INFO: Uninstalled.\n");

    result 0;
}

local function build_debian_pkg() : result type int {
    mktree(hefesto.sys.make_path(get_rootdir(), "../deb"));
    result hefesto.sys.run("dpkg-buildpackage -uc -us --pre-clean -j1 && mv ../macgonuts*.* ../deb");
}

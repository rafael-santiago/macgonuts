include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/gcc/gcc-lib.hsl
include ~/toolsets/clang/clang-app.hsl
include ~/toolsets/clang/clang-lib.hsl
include ~/toolsets/common/utils/lang/c/dependency_scanner.hsl
include ~/fsutil.hsl

function runtests(binary type string, args type string) : result type none {
    if (hefesto.sys.run($binary + " " + $args) != 0) {
        hefesto.project.abort(1);
    }
}

function set_rootdir(change_to type string) : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if ($change_to.len() > 0) {
        hefesto.sys.cd($change_to);
    }
    hefesto.sys.setenv("MACGONUTS_ROOT_DIR", hefesto.sys.pwd());
    hefesto.sys.cd($oldcwd);
}

function get_rootdir() : result type string {
    result hefesto.sys.env("MACGONUTS_ROOT_DIR");
}

function has_gcc() : result type int {
    result (hefesto.sys.run("gcc --version >/dev/null 2>&1") == 0);
}

function has_clang() : result type int {
    result (hefesto.sys.run("clang --version >/dev/null 2>&1") == 0);
}

function get_app_toolset() : result type string {
    result get_toolset() + "-c-app";
}

function get_lib_toolset() : result type string {
    result get_toolset() + "-c-lib";
}

function get_toolset() : result type string {
    var option type list;
    $option = hefesto.sys.get_option("toolset");
    if ($option.count() > 0) {
        result $option.item(0);
    }
    if (has_gcc()) {
        result "gcc";
    }
    if (has_clang()) {
        result "clang";
    }
    result "";
}

function get_codes(dirlist type list, deps type string) : result type list {
    var oldcwd type string;
    var codes type list;

    $oldcwd = hefesto.sys.pwd();

    hefesto.sys.setenv("GET_C_CPP_DEPS_SRC_ROOT", $oldcwd);

    var d type int;

    $d = 0;

    while ($d < $dirlist.count()) {
        var dirpath type string;
        $dirpath = $dirlist.item($d);

        if (hefesto.sys.cd($dirpath)) {
            $deps = $deps + get_c_cpp_deps();
            $codes.ls(".*\\.c$");
            hefesto.sys.cd($oldcwd);
        } else {
            hefesto.sys.echo("WARN: Unable to access the path \'" + $dirpath + "'. Just skipping it.\n");
        }

        $d = $d + 1;
    }

    hefesto.sys.cd($oldcwd);

    hefesto.sys.byref($deps);

    result $codes;
}

function build(dep type string) : result type int {
    var build_task type int;
    $build_task = hefesto.sys.get_func_addr("build_" + $dep);
    if ($build_task == 0) {
        hefesto.sys.echo("ERROR: Unable to find build task for " + $dep + ".\n");
        result 1;
    }
    result hefesto.sys.call_func_addr($build_task);
}

local function build_cutest() : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    var exit_code type int;
    $exit_code = 1;
    var cutest_src_dir type string;
    $cutest_src_dir = hefesto.sys.make_path(get_rootdir(), "libs/cutest/src");
    if (hefesto.sys.cd($cutest_src_dir)) {
        if (isfile("lib/libcutest.a") == 0) {
            $exit_code = hefesto.sys.run("hefesto --toolset=" + get_lib_toolset());
        } else {
            $exit_code = 0;
        }
    }
    hefesto.sys.cd($oldcwd);
    result $exit_code;
}

local function build_tests() : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("test") == 0) {
        hefesto.sys.echo("ERROR: test directory not found.\n");
        result 1;
    }
    var exit_code type int;
    $exit_code = hefesto.sys.run("hefesto --toolset=" + get_toolset());
    hefesto.sys.cd($oldcwd);
    result $exit_code;
}
